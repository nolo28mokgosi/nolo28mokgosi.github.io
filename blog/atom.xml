<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nolo28mokgosi@github.io/blog</id>
    <title>back 2 basix Blog</title>
    <updated>2023-04-30T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nolo28mokgosi@github.io/blog"/>
    <subtitle>back 2 basix Blog</subtitle>
    <icon>https://nolo28mokgosi@github.io/img/fav.ico</icon>
    <entry>
        <title type="html"><![CDATA[Value Stream in action]]></title>
        <id>valuestreaminaction</id>
        <link href="https://nolo28mokgosi@github.io/blog/valuestreaminaction"/>
        <updated>2023-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[capabilityatcenter]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="capabilityatcenter" src="/assets/images/burgerstore-1984-c0e171abe0efcd63abc45c106254f9d9.png" width="618" height="295" class="img_ev3q"></p><sub><sup>flickr.com</sup></sub><p>This article explains how to combine various applications to bring value to the client. It starts with a real-world example of a burger business and demonstrates how to use the saga pattern to construct a value stream integrating numerous applications.</p><ul><li>Value stream is a sequence of activities that creates value for the client. From the viewpoint of the client, it represents a higher-level abstraction of the process.</li><li>Saga is a sequence of local transactions. In this context, the saga pattern is used to implement value streams or processes.</li></ul><p>Saga can be coordinated using <strong>orchestration</strong> pattern or <strong>choreography</strong> pattern as highlighted in <a href="https://nolomokgosi.com/blog/orchestrationvschoreography" target="_blank" rel="noopener noreferrer">this post</a>. The orchestration pattern is the main topic of this article.</p><p>The article outlines the roles of three participants in the value stream</p><ol><li>Main Orchestrator</li><li>Mini Orchestrator</li><li>After-Effect</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="story-line">Story Line<a class="hash-link" href="#story-line" title="Direct link to heading">​</a></h2><p>Mr. and Mrs. King decided to open a burger restaurant after retiring. They decided that Mrs. King would manage the counter once the shop opened, George, their son, would handle the accounting, and Mr. King would handle the burger-making and other back-office duties.</p><p>Their first client entered the store when it was first opened on May 28, 1984.</p><ol><li>Client ordered a burger, chips, and a can of Diet Coke and gave Mrs King £20.</li><li>Mrs King took £20 and gave client £5.</li><li>Mrs. King shouted “Cheeseburger please” </li><li>Mr. King shouted back “Roger that”.</li><li>Mr. King fried the burger patty, took cheese from the fridge, and assembled a burger.</li><li>After 5 minutes Mr King puts the burger and chips on the counter</li><li>Mrs King walked to the Burger counter to collect burger and chips</li><li>She then walked to the freezer and took a can of Coke</li><li>Mrs. King packaged the order and gave it to the client &amp; client walked away</li></ol><p>At the end of the day, Mrs. King would take the order book and cash to George so he can perform his bookkeeping duties.</p><p>In this process, one can tell that:</p><ul><li>Value Stream input is “Place Order” and output is “Receive Goods”.</li><li>Mrs. King is the Main Orchestrator</li><li>Mr. King is the Mini Orchestrator (a detailed process that forms part of a value stream)</li><li>George plays the after-effect role. The role is important but does not affect the defined value stream.</li></ul><p>The below diagram visualises the above-mentioned flow.</p><p><img loading="lazy" alt="Burger-Store" src="/assets/images/burger-store-dc5ba74060c00a367e34d967fd80e228.png" width="901" height="506" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="solution-design">Solution Design<a class="hash-link" href="#solution-design" title="Direct link to heading">​</a></h2><p>Imagine we are tasked to create a solution based on the above-mentioned use case. We would begin by creating bounded-context platforms that include client-facing, burger, cold-store, and administration.</p><p>In our solution, </p><ol><li>Mrs. King &amp; Counter would be applications within a client-facing platform. As “Main Orchestrator”, Mrs. King would be responsible for the client-related value streams &amp; client experience.</li><li>Mr. King would be an application and orchestrator with a platform called Burger Platform. As the participant in out value stream, Mr. King would play the “Mini Orchestrator” role.</li><li>Fridge is an application within the Cold-Store platform. This application would be used in a synchronous fashion.</li><li>George would operate in the Administration Platform.</li></ol><p>Below diagram would represent our solution design. Note the sync and async calls during the process.</p><p><img loading="lazy" alt="Burger App" src="/assets/images/burger-app-70c38136c5c80e0258fad550819bf303.png" width="821" height="501" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Creating value streams or business processes in a large organisation can be a challenging task. The ability to identify participants and the role they play requires effort &amp; alignment across multiple teams.</p><p>To make things simpler, I recommend the following: </p><ol><li>Identify and design the value stream where the client, input &amp; output is well defined (Input: Client buys a burger, Output: Client gets burger &amp; diet coke).</li><li>Based on the value stream, create your saga (sequence of transactions). </li><li>List the participants in each transaction. When necessary, follow domain-driven design guidelines.</li><li>Choose between the orchestrations-based saga and choreography-based saga. More info on this <a href="https://nolomokgosi.com/blog/orchestrationvschoreography" target="_blank" rel="noopener noreferrer">blog post</a></li><li>Identify after-effects participants. These are important participants but they are not involved in the defined value stream (banking cash &amp; filing orders).  </li><li>Design your solution based on above</li></ol><p>By following the recommended approach, organisations can achieve greater efficiency and improve client experiences.</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="business architecture" term="business architecture"/>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="planning" term="planning"/>
        <category label="strategy" term="strategy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Capabilities in action]]></title>
        <id>businesscapabilitiesinaction</id>
        <link href="https://nolo28mokgosi@github.io/blog/businesscapabilitiesinaction"/>
        <updated>2022-09-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[capabilityatcenter]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="capabilityatcenter" src="/assets/images/capabilityAtCenter-22c5caa29da812e245e7c044155ae8c8.png" width="600" height="322" class="img_ev3q"></p><sub><sup>businessarchitectureguild.org</sup></sub><p>Capabilities are the foundation of other important viewpoints and techniques that can be used to move the business forward. </p><p>This post highlights how business capabilities can be used in other core domains of business architecture.
Furthermore, the post highlights how capabilities can be used in techniques like heat mapping and planning.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="organisation-mapping">Organisation mapping<a class="hash-link" href="#organisation-mapping" title="Direct link to heading">​</a></h3><p>Organization map is one of the 4 pillars of Business architecture.
Mapping business capability to organization highlight “Who” delivers the capability. Business capabilities executed in many different parts of the organization can lead to inconsistencies and inefficiencies. #<!-- -->[1]</p><p>Mapping capabilities to an organization can help highlight an opportunity to rationalize and save costs. </p><p><img loading="lazy" alt="Capability Organisation" src="/assets/images/caporganisation-8ed1fdc4ca6fc870ff70fd33639cc97c.png" width="941" height="298" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="information-mapping">Information Mapping<a class="hash-link" href="#information-mapping" title="Direct link to heading">​</a></h3><p>Information map is a collection of information concepts and their relationship to one another.<!-- -->[#4]</p><p>Information Mapping provides the means to articulate and visually represent information that is critical to the business. </p><p><img loading="lazy" alt="Capability Table" src="/assets/images/informationMap-08f8fc4d5d193c9227f149125e93f08a.png" width="575" height="206" class="img_ev3q"></p><p>Once information Map is established, it can be linked to business capabilities. Business capabilities require and update information concepts.</p><p><img loading="lazy" alt="Capability Table" src="/assets/images/infoCapabilityMap-9a17255402475920400d89c231333a00.png" width="472" height="305" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="value-stream-mapping">Value Stream Mapping<a class="hash-link" href="#value-stream-mapping" title="Direct link to heading">​</a></h3><p>Value Stream represents the sequence of activities(Value stages) to deliver on stakeholder requests.<!-- -->[#1]<!-- -->. A stakeholder can be a client or an internal user.</p><p>By mapping value streams to capabilities, the picture will be clear on which business capabilities are required to deliver value to the stakeholder.</p><p>Mapping key value stream to capabilities is important because its highlights capabilities used by multiple value streams. Once the organization identifies those business capabilities, the following questions should be asked</p><ul><li>What is the level of maturity of the business capability?</li><li>How effective is the business capability?</li><li>Can we scale the business capability? At what cost?</li><li>Are we investing enough funds to the maturity and effectiveness of the business capability?</li></ul><p>Providing honest answers to the questions above is the contribution to some of the heat maps mentioned in the heat map section.</p><p><img loading="lazy" alt="Value Stream" src="/assets/images/valuestream-e82d1e8d6410f00a32a366c53ed4a14e.png" width="599" height="395" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="capabilities-in-business-process-mapping">Capabilities in Business Process Mapping<a class="hash-link" href="#capabilities-in-business-process-mapping" title="Direct link to heading">​</a></h4><p>There is a grey area between business processes and value streams. In this post, </p><ul><li>Business process is the process contained (Starts and ends) within business capability that is used to enable business capability. Does it need data and operations from other capabilities? Answer is YES</li><li>Value Stream is the high-level business process that delivers value in stages to the stakeholder. </li></ul><p>The previous post suggests that business capability should be defined as per the below table.</p><p><img loading="lazy" alt="Capability Table" src="/assets/images/capabilityTable-b275f191c58916c68d684570f4b4cceb.png" width="362" height="301" class="img_ev3q"></p><p>Once the capability is defined, processes within the capability should be documented. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="heat-mapping">Heat Mapping<a class="hash-link" href="#heat-mapping" title="Direct link to heading">​</a></h3><p>Heat mapping is a technique that helps identify opportunities for business improvement and investment. It can help an organization to highlight below for each business capability</p><ul><li>Maturity or strategic contribution, </li><li>Criticality, </li><li>Effectiveness or performance, </li><li>Value contribution or </li><li>Cost contribution</li></ul><p>For example, an organization can create a maturity heat map using below color indicator</p><ul><li>Green: the desired level of maturity</li><li>Yellow: Almost at maturity but the organization needs to work on it</li><li>Red: lots of improvement needed</li><li>Purple: capability needed by the organization but does not exist.</li></ul><p><img loading="lazy" alt="Heat Map" src="/assets/images/heatmap-139a6d5f28d6e7dbb357c2bf23bde444.png" width="930" height="451" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="capability-based-planning">Capability based planning<a class="hash-link" href="#capability-based-planning" title="Direct link to heading">​</a></h3><p>Capability-based planning focuses on the planning, engineering, and delivery of strategic business capabilities to the enterprise.<!-- -->[#3]<!-- -->. </p><p>The below figure highlights that for capability-based planning to take place, capabilities must be defined.
<img loading="lazy" alt="CapabilityIncrement" src="/assets/images/capabilityIncrement-69d9bc02de81e5af619f1719c37b5807.png" width="893" height="460" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Capabilities, Value Stream, Information, and Organisation are the core domains of business architecture. This post made it clear that capabilities are the center or focal point of business architecture. Capabilities are the key that allows us to relate value streams, information, and organization</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><p>#1: <a href="https://pubs.opengroup.org/togaf-standard/business-architecture/business-capabilities.html#_Toc95135880" target="_blank" rel="noopener noreferrer">Business Capabilities, Version 2</a></p><p>#2: <a href="https://cdn.ymaws.com/www.businessarchitectureguild.org/resource/resmgr/bizbok_8_5/bizbok_v8.5_final_part1.pdf" target="_blank" rel="noopener noreferrer">A Guide to the Business Architecture Body of Knowledge® (BIZBOK® Guide)</a></p><p>#3: <a href="https://pubs.opengroup.org/architecture/togaf9-doc/m/chap28.html" target="_blank" rel="noopener noreferrer">Togaf Standard 9.2</a></p><p>#4: <a href="https://pubs.opengroup.org/togaf-standard/business-architecture/information-mapping.html" target="_blank" rel="noopener noreferrer">Information Mapping</a></p><p>#5: <a href="https://cdn.ymaws.com/www.businessarchitectureguild.org/resource/resmgr/public_resources/Business_Architecture_Metamo.pdf" target="_blank" rel="noopener noreferrer">Business Architecture Metamodel Guide</a></p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="business architecture" term="business architecture"/>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="planning" term="planning"/>
        <category label="strategy" term="strategy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Business Capabilities Map]]></title>
        <id>businesscapabilities</id>
        <link href="https://nolo28mokgosi@github.io/blog/businesscapabilities"/>
        <updated>2022-09-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[rightandwrong]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="rightandwrong" src="/assets/images/bizbok-bizarch-e0e73f52369181e4733fb2973c0dd65f.png" width="811" height="405" class="img_ev3q"></p><sub><sup>fee.org</sup></sub><p>In the past 3 months my curiosity drove me to business architecture. I read multiple articles and I landed in rabbit hole which increased my curiosity. During the process, I discovered multiple frameworks addressing business architecture but I stuck with "Guide to the Business Architecture Body of Knowledge".<!-- -->[#3]<!-- -->. The guide outlines that there are four core elements of business Architecture which includes:</p><ol><li>Business Capability Map</li><li>Value Stream map</li><li>Information map</li><li>Organisation Map</li></ol><p>This post focuses on Business Capability Map. The post defines business capability, business capability map and discusses the benefits of creating a business capability map.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-business-capability">What is business Capability?<a class="hash-link" href="#what-is-business-capability" title="Direct link to heading">​</a></h2><p>Business capability represents the ability of a business to do something <!-- -->[#1]<!-- -->.
It focuses on  what the business does, not how it does it. In a nutshell, business capabilities provide the building blocks upon which organisation execute an organisation’s business model. </p><p>In order for the business capability to be defined, it is important to understand <strong>elements that enables</strong> a business capability which includes people, processes, information and resources.
<img loading="lazy" alt="Capability Elements" src="/assets/images/capability-elements-1591c5438eacbb1a6028463f127f7389.png" width="471" height="222" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="people">People<a class="hash-link" href="#people" title="Direct link to heading">​</a></h4><p>People represents individual actors, stakeholders, business units, or partners involved in delivering business capability. <!-- -->[#1]</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="processes">Processes<a class="hash-link" href="#processes" title="Direct link to heading">​</a></h4><p>Business capabilities may be enabled or delivered through a number of business processes <!-- -->[#1]<!-- -->. Processes clarifies how the business is done. Documenting the processes that makes up the capability can help organisation identify loop holes and improve the capability where necessary.</p><p>Processes must be self contained within the business capability to provide focus for maturing the capability <!-- -->[#1]<!-- -->. This means we should be able to separate capability processes from value streams which focuses on delivering end-to-end value to the stakeholder. </p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="information">Information<a class="hash-link" href="#information" title="Direct link to heading">​</a></h4><p>According to <!-- -->[#1]<!-- -->, “Information represents the business data, knowledge, and insight required or consumed by the business capability”. Capability can exchange information with other capabilities to support value streams.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="resources">Resources<a class="hash-link" href="#resources" title="Direct link to heading">​</a></h4><p>Business capabilities rely on tools or assets like </p><ul><li>Systems or applications</li><li>Physical assets like buildings and machines</li><li>Intangible assets like intellectual property</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="defining-business-capability">Defining Business capability<a class="hash-link" href="#defining-business-capability" title="Direct link to heading">​</a></h2><p>It is recommended that business capability is defined in noun-verb format. e.g Product Development.
Each Business Capability needs to be accompanied by a description. It is recommended that the description should be inline of “Ability to do X” where X can be “develop product which includes all the restrictions and parameters to provide value to our clients”</p><p>According to <a href="https://www.bainstitute.org/resources/articles/defining-business-capability-cheat-sheet" target="_blank" rel="noopener noreferrer">William Ulrich</a>, organisations can use below guide to define business capabilities.</p><ul><li>Business capability is what is been done,  not how it’s done. Emailing or Faxing are not capabilities, they describe <strong>how</strong> capability is done. Capital management is the capability because it describes <strong>what</strong> is being done.</li><li>Ensure business capability is not a process or value stream. Anything that requires movement and engages in sequence of activities is a value stream or process e.g. authorising.</li><li>Business capabilities must be clearly defined. When we have product Management as capability, we need to clearly define the Product, and clearly define what we really mean by Management. Describing Product Management as "Ability to manage a product" is not ideal.</li><li>Business capabilities are purely business views of the business. It is important remove the IT or systems view when identifying business capabilities. It is a business capability whether is done in a manual fashion, or it’s automated using IT systems</li></ul><p>Below table highlights how an ogranisation can choose to define a business capability.
<img loading="lazy" alt="Business capability example" src="/assets/images/capabilityTable-b275f191c58916c68d684570f4b4cceb.png" width="362" height="301" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="business-capability-map">Business Capability Map<a class="hash-link" href="#business-capability-map" title="Direct link to heading">​</a></h2><p>Business capability Map is the representation of organisational business capabilities, at an appropriate level of decomposition, logically grouped into different categories. </p><p>Business capability map provide self-contained view of the business. It does not represent</p><ul><li>Organisational Structure</li><li>Business processes</li><li>Representation of systems or applications</li></ul><p>If there is a request to represent other view points, it is important to tap into other pillars of business architecture like value stream map, information map or organisation map. </p><p>Business capability map promotes common understanding of the business across different business units. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="structuring-business-capability-map">Structuring Business Capability Map<a class="hash-link" href="#structuring-business-capability-map" title="Direct link to heading">​</a></h3><p>There are 2 ways to structure a business capability map</p><ul><li>Stratification</li><li>Leveling</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="stratification">Stratification<a class="hash-link" href="#stratification" title="Direct link to heading">​</a></h4><p>It is a process to grouping business capabilities within categories or layers.
Each layer provides different perspective to different stakeholders. For example, an organisation </p><ol><li>Top Layer (Strategic): focuses on capabilities related to strategy and and business directions normally targeting executive or drivers of the business</li><li>Middle Layer (Core): focusing on customer-facing element of business</li><li>Bottom Layer(Supporting): focusing on lower level capabilities crucial to run the business but not visible to the client.</li></ol><p>Below is the level 1 business capability model
<img loading="lazy" alt="Table for stratification" src="/assets/images/stratification-6b66e4c649289da6961bba6a24842d2c.png" width="716" height="351" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="leveling">Leveling<a class="hash-link" href="#leveling" title="Direct link to heading">​</a></h4><p>Leveling is the process of decomposing top-level capabilities into lower level capabilities.<!-- -->[#1]<!-- -->. Different stake holders are interested in different level of capabilities. For example, executives or direction drivers might not be interested on level 3 of capabilities but engineers might be interested. </p><p><img loading="lazy" alt="Table for levelling" src="/assets/images/levelling-aa3fc739d543e8d4577814c218b933a4.png" width="378" height="427" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="benefits-of-business-capability-mapping">Benefits of Business Capability Mapping<a class="hash-link" href="#benefits-of-business-capability-mapping" title="Direct link to heading">​</a></h2><p>Business capabilities provide and abstraction of the business reality in a way that helps to simplify the conversation between interested stakeholders<!-- -->[#1]</p><p>Some of the key benefits of Business Capability Map includes:</p><ol><li>Providing common language regarding what the business does.</li><li>Encourage relationship within the business because it highlights who is responsible to bring the capability to life.</li><li>Helps organisation to highlight key capabilities to encourage focused investments.</li><li>Provides a foundation to create other core business architecture elements like value organisation map, value stream map and information map.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Documented or undocumented, every business has building blocks(business capabilities) for executing business model. In a case where building blocks are not documents, organisation might experiences the gap between different business units or structures especially in large companies. </p><p>Documenting business capabilities and creating business capability map is the first step to bring employees close to each other. Below figure highlights that different stakeholders within the business have different roles and viewpoints. The figure shows how business capability can be the glue to bring the stakeholders together.</p><p><img loading="lazy" alt="Business and tech View points" src="/assets/images/cbp-ac951c490234e188ed90e28b353b6e18.png" width="521" height="391" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><p>#1: <a href="https://pubs.opengroup.org/togaf-standard/business-architecture/business-capabilities.html#_Toc95135880" target="_blank" rel="noopener noreferrer">Business Capabilities,Version 2</a></p><p>#2:<a href="https://www.bainstitute.org/resources/articles/defining-business-capability-cheat-sheet" target="_blank" rel="noopener noreferrer">William Ulrich</a></p><p>#3: <a href="https://cdn.ymaws.com/www.businessarchitectureguild.org/resource/resmgr/bizbok_8_5/bizbok_v8.5_final_part1.pdf" target="_blank" rel="noopener noreferrer">A Guide to the Business Architecture Body of Knowledge® (BIZBOK® Guide)</a></p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="business architecture" term="business architecture"/>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="planning" term="planning"/>
        <category label="strategy" term="strategy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bulding right thing right]]></title>
        <id>buildrightthingright</id>
        <link href="https://nolo28mokgosi@github.io/blog/buildrightthingright"/>
        <updated>2022-07-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[rightandwrong]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="rightandwrong" src="/assets/images/rightandwrong-f9173d40840d0a36b93645b3c878e8e2.webp" width="900" height="450" class="img_ev3q"></p><sub><sup>fee.org</sup></sub><p>I recently listened to InfoQ podcast where Susanne Kaiser spoke about DDD, Wardley Mapping &amp; Team topologies. Responding to one of the questions she said, “when we are building systems in general, we are faced with challenges of building the right thing and building the thing right”.</p><p>I was fascinated by the use of the words “wrong” and “right” and I decided to dig deep.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h2><p>This post unpacks the following:</p><ul><li>Building the right thing. </li><li>Building the thing right.</li><li>Building the right thing wrong.</li><li>Building the wrong thing right.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-the-right-thing">Building the right thing<a class="hash-link" href="#building-the-right-thing" title="Direct link to heading">​</a></h3><p>According to Susanne, building the right thing questions:</p><ul><li>How aligned is our solution to the users needs?</li><li>How aligned is our solution to the business need?</li><li>Is the thing we are building valuable for our client?</li><li>Do we have understand the problem and do we share common understanding with all stakeholders? </li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-the-thing-right">Building the thing right<a class="hash-link" href="#building-the-thing-right" title="Direct link to heading">​</a></h3><p>Building the right thing focuses on the qualities of the thing we are building. Some call them non-functional requirement, or the “ilities” of the software e.g. scalability, reliability, maintainability, security etc. It also focuses on regulation and organisational governance processes.</p><p>According to Susanne, building the thing right addresses the following:</p><ul><li>Efficiency of engineering practices e.g. CI-CD, Automated testing</li><li>Efficiency to deliver value.</li><li>How fast and easy can we deliver the changes.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-the-right-thing-wrong">Building the right thing wrong<a class="hash-link" href="#building-the-right-thing-wrong" title="Direct link to heading">​</a></h2><p>Building the right thing wrong happens when we care and invest on the output, not how the thing is built.</p><p>It is the same as building the house with wrong foundation. When the builder hands over the keys to the house owner (client), family and the builder pops champagne and upload pictures on Instagram. 2 years later after few rainfalls, the lack of quality pops up and house starts cracking.
<img loading="lazy" alt="wrongfoundation" src="/assets/images/wrongfoundation-29aadd2de4ae8117ac0923c25d7f1f6f.webp" width="1024" height="724" class="img_ev3q"></p><sub><sup>dryprosystems.com</sup></sub><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-the-wrong-thing-right">Building the wrong thing right<a class="hash-link" href="#building-the-wrong-thing-right" title="Direct link to heading">​</a></h2><p>Building the wrong thing right is same as building the house adhereing to all building qualities, but impractical to live in.</p><p>When the builder hand over the key to the client, no one is popping champagne. The 2 parties engage in heated argument</p><ul><li>Client: What type of house is this? I mean how do you expect me to get my car in the garage?</li><li>Builder: You wanted a garage with the ramp right? I built it to your specification. Exactly what you wanted and the foundation is very strong.</li><li>Client: Huuuuuusaaaaaa!</li></ul><p><img loading="lazy" alt="goodfoundation" src="/assets/images/goodfoundation-df2c0af2e8eab2c4256e9f2e957104ee.jpg" width="609" height="500" class="img_ev3q"></p><sub><sup>imgflip.com</sup></sub><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reality">Reality<a class="hash-link" href="#reality" title="Direct link to heading">​</a></h2><p>Most organisations strive to build the right thing right. Reality is there are forces in play that disrupts the main objective. </p><p>Some of this forces are created by the structure or divisions in the organisation. For example, take an organisation that has a sales team and technology team. In a case where by there's huge walls between this teams and both team are not interested on what other teams do and why, you end up with the following:</p><ul><li>Sales team cares about: Building the thing right.</li><li>Technology team cares about : Building the right thing.</li></ul><p>As an organisation, you'll have 2 teams pulling opposite directions which leads to:</p><ol><li>Wrong thing built right (House with weird garage ramp)</li><li>Right thing built wrong (House with wrong foundation)</li></ol><p><img loading="lazy" alt="disagreement" src="/assets/images/disagreement-14dcd9cf30785c885e19bc52158e3f15.webp" width="800" height="593" class="img_ev3q"></p><sub><sup>time.com</sup></sub><h4 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a class="hash-link" href="#solution" title="Direct link to heading">​</a></h4><p>There are multiple solutions to this problem. There are lots of case studies and books written. Some of solution items includes:</p><ul><li>Breaking down the silos between sales and technology.</li><li>T shaped individuals within the organisation.<ul><li>Sales teams understand the basics of what Technology team does.</li><li>Techonology team understand the basics of what Sales team does.</li></ul></li><li>Alignment and common understading of the problem the organisation is trying to solve.</li><li>Teams in the organisation working towards common goal.</li></ul><p>In summary, this is what most startups got right and big organisation are still struggling to get right. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><h4 class="anchor anchorWithStickyNavbar_LWe7" id="building-wrong-thing-right">Building wrong thing right<a class="hash-link" href="#building-wrong-thing-right" title="Direct link to heading">​</a></h4><p>I’m not a fan of building the wrong thing right. It means we are building something for the sake of building. We are showing off our amazing technology skills but the results are not relevant and might not be used by our customers.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="building-right-thing-wrong">Building right thing wrong<a class="hash-link" href="#building-right-thing-wrong" title="Direct link to heading">​</a></h4><p>Sometimes it is ok to build right thing wrong “PROVIDED” we are aware and what we deem wrong is reversable. </p><p>Different constraints can lead us to this route</p><ul><li>Budget or Cost</li><li>Timelines</li><li>MVP (testing the waters)</li></ul><p>Based on those trade-offs, we can be comfortable with version 0.01 of what we are building knowing that we will fix where necessary.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="building-right-thing-right">Building right thing right<a class="hash-link" href="#building-right-thing-right" title="Direct link to heading">​</a></h4><p>We always strive to build right thing right. It's our wish to build the right thing right however, experience and reality says otherwise. Constraints like cost, timelines can be the deciding factor. </p><p>When we are faced with such contraints, the best approach is to avoid “Building the <strong>whole</strong> thing right”. Let's divide the <strong>whole</strong> thing into smaller deliveries and crack on.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><p>#1: <a href="https://www.infoq.com/podcasts/ddd-wardley-mapping-team-topologies/" target="_blank" rel="noopener noreferrer">DDD, Wardley Mapping &amp; Team topologies</a></p><p>#2: <a href="https://www.geeksforgeeks.org/non-functional-requirements-in-software-engineering/" target="_blank" rel="noopener noreferrer">Non-functional requirements in software engineering</a></p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="planning" term="planning"/>
        <category label="strategy" term="strategy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Orchestration and Choreography]]></title>
        <id>orchestrationvschoreography</id>
        <link href="https://nolo28mokgosi@github.io/blog/orchestrationvschoreography"/>
        <updated>2022-06-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h2><p>I have been involved in multiple orchestration vs choreography conversation. Conversation are normally about which one is better. At the end of most conversations, there’s no common ground, all goes down to preference. </p><p>One Friday morning on my way to work I listened to <a href="https://www.infoq.com/podcasts/design-time-coupling-microservices/" target="_blank" rel="noopener noreferrer">Design time coupling in microservices</a> podcast and Chris Richardson touched on this subject. When the host asked him to talk about orchestration and choreography he said “I use those terms in the context of a saga pattern”.
That’s when the penny dropped and I thought...this makes sense.</p><p>In this post I will define these concepts and explain the relation between saga,orchestration and choreography. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="saga-pattern">Saga Pattern<a class="hash-link" href="#saga-pattern" title="Direct link to heading">​</a></h2><p>Saga is a sequence of transactions that updates services. Each service publishes a message or event to trigger the next transaction in the saga <!-- -->[#2]<!-- -->.
Saga provides transaction management using sequence of local transactions <!-- -->[#3]<!-- -->.</p><p>Transaction is single unit of logic or work. Transaction can have one or more operations which we’ll refer to as local transactions in this post.</p><p>Let’s take an example where a user books a holiday via a web portal. Booking process will include:</p><ol><li>Request booking</li><li>Making payment </li><li>Send confirmation email</li></ol><p>There are 2 ways to design the system:</p><ol><li>Single service that perform all operations at once. Example, 2 phase commit (2PC) type of transaction where all services in the transaction are required to commit or rollback before transaction can commit.</li></ol><p><img loading="lazy" alt="2pc transaction" src="/assets/images/transaction-2pc-0bcec117097334fb9b70a392f8b8191f.png" width="471" height="291" class="img_ev3q"></p><ol start="2"><li>Multiple services performing local transactions (Saga Pattern).</li></ol><p><img loading="lazy" alt="2pc transaction" src="/assets/images/transaction-saga-5dd5563f7ef99ca3d2cfcda9ef58ef6e.png" width="511" height="281" class="img_ev3q"></p><p>There are 2 ways to implement a saga pattern, orchestration-based and choreography-based. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="orchestration">Orchestration<a class="hash-link" href="#orchestration" title="Direct link to heading">​</a></h2><p>According to Cambridge dictionary, orchestration is “an arrangement of a piece of music to be played by an orchestra”.</p><p>When I think of orchestration, I see a group of musicians with their different instruments, playing a melodic tune that touches the heart. I also see a conductor, someone who directs the orchestra with a conducting baton.
<img loading="lazy" alt="ochestraonstrage" src="/assets/images/orchestra-22ce6b634bb73ae227184ef61fcb2ce7.jpg" width="1140" height="626" class="img_ev3q"></p><sub><sup>sso.org</sup></sub><h3 class="anchor anchorWithStickyNavbar_LWe7" id="orchestration-based-saga">Orchestration-based Saga<a class="hash-link" href="#orchestration-based-saga" title="Direct link to heading">​</a></h3><p>In orchestration-based saga, a centralised controller(orchestrator) tells services(saga participants) what local transactions to execute <!-- -->[#3]<!-- -->. The orchestrator then interprets state of each operation based on the feedback from the participant.</p><p><img loading="lazy" alt="choreographysaga" src="/assets/images/orchestration-design-3fc27697d51395c6000d754c165105d2.png" width="665" height="398" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="advantages">Advantages<a class="hash-link" href="#advantages" title="Direct link to heading">​</a></h4><ol><li>Great for complex workflows with multiple services including long running local transactions.</li><li>Services participating in a workflow don't need to know about commands from other participants.</li><li>Single point to track the saga workflow</li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="disadvantages">Disadvantages<a class="hash-link" href="#disadvantages" title="Direct link to heading">​</a></h4><ol><li>Centralised coordinator adds another point of failure in the system</li><li>New coordinated design requires additional centralised service.  </li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="choreography">Choreography<a class="hash-link" href="#choreography" title="Direct link to heading">​</a></h2><p>According to Cambridge dictionary, choreography is “the skill of combining movements into dances to be performed”.
When I think of choreography I see group of dancers on stage, dancing to music in a well coordinated manner. Each dancer on the stage knows what to do. There is no central point to drive or command.</p><p><img loading="lazy" alt="choreographers" src="/assets/images/choreographers-eefe7c6ec7a10dbcbf4c61b4567c243e.jpg" width="2400" height="1600" class="img_ev3q"></p><sub><sup>countrytimes.co.uk</sup></sub><h3 class="anchor anchorWithStickyNavbar_LWe7" id="choreography-based-saga">Choreography based saga<a class="hash-link" href="#choreography-based-saga" title="Direct link to heading">​</a></h3><p>In choreography-based saga, services(saga participants) exchange messages or events without a centralised point of control. Each service publishes events that triggers activities in other services.<strong>Note</strong> Published event can trigger acitivities in multiple services.</p><p><img loading="lazy" alt="choreographysaga" src="/assets/images/choreography-design-8ee98b6472352b991d83d35c5e1a250a.png" width="791" height="280" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="advantages-1">Advantages<a class="hash-link" href="#advantages-1" title="Direct link to heading">​</a></h4><ol><li>Good for workflows that do not need  coordination logic.</li><li>Unlike orchestrations-based, it does not require additional additional service implementation.</li><li>Responsibilities are distributed across services participating in the saga therefore .</li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="disadvantages-1">Disadvantages<a class="hash-link" href="#disadvantages-1" title="Direct link to heading">​</a></h4><ol><li>It can be difficult to track which services listen to which commands.</li><li>Confusion when adding new services in the workflow.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>It is a good idea to look at orchestration and choreography as descendants of a saga pattern. This way it forces us to ask ourselves questions like:</p><ol><li>What process/workflow are trying to create?</li><li>What activities do we want to trigger when "X" happens?</li></ol><p>There's slight difference in terms of type of messages being exchanged between the patterns.
Orchestration-based saga utilised commands more and choreography-based saga can operate on events only. </p><p>There’s no right or wrong in both orchestration and choreography. Both approaches works but it’s important to look at pros &amp; cons for both. It’s also important to consider factors around implementing a saga pattern including:</p><ol><li>Data consistency for processes spanning multiple services <!-- -->[#3]<!-- -->.</li><li>Maintainability and ability to debug as more services are added in the process.</li><li>Idempotence to ensure data consistency and reduce side-effects.</li><li>Observability implementation is key.</li><li>Ability to track workflows.</li><li>Compensating transactions to undo changes that were made by other transactions.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><p>#1 InfoQ's <a href="https://www.infoq.com/podcasts/design-time-coupling-microservices/" target="_blank" rel="noopener noreferrer">Chris Richardson on Design-Time Coupling in Microservices</a></p><p>#2  <a href="https://microservices.io/patterns/data/saga.html" target="_blank" rel="noopener noreferrer">Patterns: Saga</a> by miroservices.io</p><p>#3 Microsoft's <a href="https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/saga/saga" target="_blank" rel="noopener noreferrer">Saga distributed transactions pattern</a></p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating C4 diagrams]]></title>
        <id>createC4diagrams</id>
        <link href="https://nolo28mokgosi@github.io/blog/createC4diagrams"/>
        <updated>2022-05-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h2><p>When I was introduced to C4 in 2019 there were few tools that supported it. Today there's multiple and I'll go through few tools in this post. </p><p>It is ok to create c4 in a tool of your choice. The most important part of creating C4 diagrams is to follow notation and recommended guidelines.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="notation">Notation<a class="hash-link" href="#notation" title="Direct link to heading">​</a></h3><p>It is recommended that every element in the diagrams includes</p><ul><li>Name</li><li>Type (Person, system, container)</li><li>Descriptive text</li><li>Technology choice where appropriate (e.g. on a container)
<img loading="lazy" alt="notation" src="/assets/images/c4notation-db7c287cd171c22cf3cbb75d6b920d44.jpeg" width="1200" height="480" class="img_ev3q"><sub><sup>#1 infoQ.com</sup></sub></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="guidelines">Guidelines<a class="hash-link" href="#guidelines" title="Direct link to heading">​</a></h3><p>As illustrated in my <a href="https://nolomokgosi.com/blog/introductiontoc4" target="_blank" rel="noopener noreferrer">previous blog post</a>,</p><ul><li>Each diagram should have title describing diagram type and scope (e.g. Context diagram of Travel Sko).</li><li>Each diagram should have a legend.</li><li>Acronyms and abbreviations should be understandable, otherwise avoid them.</li><li>Every container should have technology explicitly specified. (e.g Azure function, React Web app)</li><li>Every relationship should be label with direction and intent</li><li>Diagrams should not be stale. I prefer to only create Context and Container diagram because their rate of change is very low and easy to keep them fresh.  </li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tools">Tools<a class="hash-link" href="#tools" title="Direct link to heading">​</a></h2><p>This sections outlines tools that can be used to create C4 diagrams. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="gliffy-drawio-ms-visio">Gliffy, Draw.io, Ms Visio<a class="hash-link" href="#gliffy-drawio-ms-visio" title="Direct link to heading">​</a></h3><p>Gliffy, Draw.io, Ms Visio are all in the same category. You can draw elements as illustrated in the notation, or you can search for c4 plugin of the tool and start creating c4 diagrams, nothing complex.</p><p>Gliffy documented how to create c4 on <a href="https://www.gliffy.com/blog/c4-model" target="_blank" rel="noopener noreferrer">this blog post</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="archimate">Archimate<a class="hash-link" href="#archimate" title="Direct link to heading">​</a></h3><p>On <a href="https://www.archimatetool.com/blog/2020/04/18/c4-model-architecture-viewpoint-and-archi-4-7/" target="_blank" rel="noopener noreferrer">archimatetool.com</a> post, Jean-Baptiste Sarrodie explains how to create C4 diagrams using archimate.
He further highlights that c4 diagrams can be created by mapping c4 elements to archimate elements as outlined below:</p><ul><li>Person = Business Actor</li><li>Software System or Container = Application Component</li><li>Component = Application function</li><li>Code Element = Application function</li><li>Relationship = Triggering Relationship</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="structurizr">Structurizr<a class="hash-link" href="#structurizr" title="Direct link to heading">​</a></h3><p>Structurizr is a "Diagram as Code" tool that allows you to create architecture diagrams, focusing mainly on C4.
According to <a href="https://structurizr.com" target="_blank" rel="noopener noreferrer">structurizr</a>structurizr allows you to create multiple diagrams from single model. The tool was designed to support C4.</p><p>For example, this code creates the design below the code</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">workspace {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    model {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        user = person "User"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        softwareSystem = softwareSystem "Software System" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            webapp = container "Web Application" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                user -&gt; this "Uses"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            container "Database" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                webapp -&gt; this "Reads from and writes to"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    views {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        systemContext softwareSystem {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            include *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            autolayout lr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        theme default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="structurizr" src="/assets/images/structuruzrSample-9dae9f444a6dea71b1014c6c33dd66d0.png" width="626" height="325" class="img_ev3q"></p><p>Structurizr support other architecture artifacts including ADR as illustrated on <a href="https://structurizr.com/share/39459/decisions/adr-tools" target="_blank" rel="noopener noreferrer">structurizr</a>.</p><p>The tool is not free, check out <a href="https://structurizr.com/pricing" target="_blank" rel="noopener noreferrer">pricing</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="plant-uml">Plant UML<a class="hash-link" href="#plant-uml" title="Direct link to heading">​</a></h3><p>PlantUML is an open-source tool that allows users to create diagrams as code.
<a href="https://github.com/plantuml-stdlib/C4-PlantUML" target="_blank" rel="noopener noreferrer">C4-PlantUml</a> package brings C4 into plantuml. </p><p>This code creates the picture below the code.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@startuml C4_Elements</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Person(personAlias, "Label", "Optional Description")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Container(containerAlias, "Label", "Technology", "Optional Description")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System(systemAlias, "Label", "Optional Description")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Rel(personAlias, containerAlias, "Label", "Optional Technology")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@enduml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="plantUmlSample" src="/assets/images/plantUmlSample-efb2c0dd0b9e5d5030756137c1cc8150.png" width="391" height="327" class="img_ev3q"></p><p>More information on <a href="https://github.com/plantuml-stdlib/C4-PlantUML" target="_blank" rel="noopener noreferrer">Github</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>C4 diagrams can be created using any tool. The most important thing is to follow the notation. I use Gliffy or DrawIO for diagrams with short life span or for clarificaiton in a workshop session.</p><p>I'm currently using C4-PlatUml which allows me to define all components (System, persons, containers) in a a base file and reuse them in multiple diagrams.
Reuse is very important because components has descriptions that changes as I get clarifications. Changing description in one place and getting to reflect in multiple diagrams is cool.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><p>#1: <a href="https://www.infoq.com/articles/C4-architecture-model/" target="_blank" rel="noopener noreferrer">https://www.infoq.com/articles/C4-architecture-model/</a></p><p>#2: <a href="https://www.archimatetool.com/blog/2020/04/18/c4-model-architecture-viewpoint-and-archi-4-7/" target="_blank" rel="noopener noreferrer">https://www.archimatetool.com/blog/2020/04/18/c4-model-architecture-viewpoint-and-archi-4-7/</a></p><p>#3: <a href="https://github.com/plantuml-stdlib/C4-PlantUML" target="_blank" rel="noopener noreferrer">https://github.com/plantuml-stdlib/C4-PlantUML</a></p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="diagramming" term="diagramming"/>
        <category label="modelling" term="modelling"/>
        <category label="c4" term="c4"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sequence on C4]]></title>
        <id>sequencediagramonc4</id>
        <link href="https://nolo28mokgosi@github.io/blog/sequencediagramonc4"/>
        <updated>2022-04-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h2><p> "Architects ride the Architect Elevator from the penthouse, where the business strategy is set, to the engine room, where the enabling technologies are implemented" ~ Gregor Hohpe</p><p><img loading="lazy" alt="Penthouse Elevator" src="/assets/images/elevator-b81dfc9be5054c7c39871fac5781e2e7.jpeg" width="634" height="500" class="img_ev3q"></p><sub><sup>Credit roysrise.com</sup></sub><p> C4 diagrams are some of the best artefacts to carry in your briefcase while riding the elevator up and down. Amongst other artefacts like conceptual design and business capability map, C4 context and container diagrams are perfect for the pent house discussion.</p><p> The discussions with the engineers &amp; analysts in the engine room needs a full story, from the top to the lower details. This is where we need artefacts that connects user journeys to technology components. The connection is established by creating communication diagram or sequence diagram.</p><p>This posts outlines how to create sequence diagram that aligns with a container diagram.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-a-sequence-diagram">Creating a Sequence diagram<a class="hash-link" href="#creating-a-sequence-diagram" title="Direct link to heading">​</a></h2><p>In this section we'll create a sequence diagram for a registration process. We'll use and application called TravelSko with allows clients to manage their travel goals and calculates travel score from those records.</p><p>Before creating sequence diagram, we create context and container diagram to highlight the connection between 3 diagrams.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context-diagram">Context Diagram<a class="hash-link" href="#context-diagram" title="Direct link to heading">​</a></h2><p>Application is simple and context diagram is self explanatory. Check out <a href="https://nolomokgosi.com/blog/introductiontoc4" target="_blank" rel="noopener noreferrer">previous post</a> if you would like to know more about context diagram
<img loading="lazy" alt="Context Diagram" src="/assets/images/tskoContext-40c7229ab71366a6668282c988b6924f.png" width="676" height="351" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="container-diagram">Container Diagram<a class="hash-link" href="#container-diagram" title="Direct link to heading">​</a></h2><p>Check out <a href="https://nolomokgosi.com/blog/introductiontoc4" target="_blank" rel="noopener noreferrer">previous post</a> if you would like to know more about container diagram</p><p><img loading="lazy" alt="Context Diagram" src="/assets/images/tskoContainer-21434f898806f9633a6df70abe2023c8.png" width="1066" height="681" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="sequence-diagram">Sequence diagram<a class="hash-link" href="#sequence-diagram" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="Sequence Diagram" src="/assets/images/tskoRegSequence-0bf2c2a5be1f29d386f3e2882018a3ba.png" width="1272" height="511" class="img_ev3q"></p><p>To ensure that sequence diagram aligns we container diagram, we need to:</p><ul><li>Ensure all the containers in sequence diagram are in container diagram</li><li>Box the containers in the application name if the sequence diagram includes more than one application</li><li>Follow C4 colour concepts. External system should also be grey and keep containers blue</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="plant-uml-code-for-the-sequence-diagram">Plant UML Code for the sequence diagram<a class="hash-link" href="#plant-uml-code-for-the-sequence-diagram" title="Direct link to heading">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@startuml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">actor TSKO_Client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">autonumber</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">title Registration Process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">box "TravelSko Application" #FFFFFF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">participant Mobile_App #66B2FF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">participant Profile_Service #66B2FF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">participant Database #66B2FF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">participant Internal_Event_Stream #66B2FF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">participant Communication_Handler #66B2FF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end box</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">participant Communication_Application #CCC</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TSKO_Client -&gt; Mobile_App: Create Account</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Mobile_App -&gt; Profile_Service: Send create account command</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Profile_Service -&gt; Database: Save account details</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Profile_Service -&gt; Internal_Event_Stream: Publish "AccountCreated" event</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Internal_Event_Stream -&gt; Communication_Handler: Publish "AccountCreated" event</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Communication_Handler -&gt; Communication_Handler: Create email from template</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Communication_Handler -&gt; Communication_Application: Send verification email</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Communication_Application --&gt; Communication_Handler: Send email response</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Communication_Handler -&gt; Database: Save communication response</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@enduml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Years ago if I had to choose between a sequence and communication diagram I always chose communication diagram. Since I started C4 I found it easy to create simple sequence diagrams derived from container diagram as highlighted in the previous session.</p><p>I prefer creating communication diagram at high-level interaction between applications.</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="diagramming" term="diagramming"/>
        <category label="modelling" term="modelling"/>
        <category label="c4" term="c4"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introduction to C4 Diagramming]]></title>
        <id>introductiontoc4</id>
        <link href="https://nolo28mokgosi@github.io/blog/introductiontoc4"/>
        <updated>2022-03-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Scenarios]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="scenarios">Scenarios<a class="hash-link" href="#scenarios" title="Direct link to heading">​</a></h2><p>Scenario 1: Imagine you are at the airport in a <strong>foreign country</strong> and about to fly to your home country.A stranger sits next to you, greets you and ask you where are you from. What will be your response?</p><p>Scenario 2: Imagine you are at the domestic terminal in your <strong>home country</strong>, and you are about to fly to another city. A stranger greets you and ask you where are you from. What will be your response?</p><p>Scenario 3: You are in a coffee shop at local shopping centre and stranger asks you where are you from, what will be your response?</p><p>Do you have different answers in the 3 scenarios? If so why?</p><p><img loading="lazy" alt="Airport wait" src="/assets/images/airport-feceb0a1fe16e8e2001c08832c4ed9d8.png" width="597" height="326" class="img_ev3q"></p><sub><sup>Credit rgbstock</sup></sub><p><strong>If I had to respond</strong></p><p>I’m from a village called Mabeskraal, classified under Rusternburg town/district in South Africa. My response in 3 scenarios:</p><ol><li>In a foreign country : I’m from South Africa</li><li>In my home country: I’m from Rusternburg</li><li>At local shopping mall: I’m from Mabeskraal</li></ol><p>Answers are different because "it depends" on where I am are at the particular point, and who's asking.
In a case where the stranger is familiar with South Africa, dialog might go like this:</p><ul><li>Stranger: Where in South Africa?</li><li>Me: In Rusternburg (Zooming 1 level down)</li><li>Stranger: Oh I’ve been to Rusternburg, where exactly? </li><li>Me: In a village called Mabeskraal (Zooming another level down)</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="c4-modelling">C4 Modelling<a class="hash-link" href="#c4-modelling" title="Direct link to heading">​</a></h2><p>How does C4 fit in all of this? It is all about the ability to zoom in and out "depending" on where you are and the people you are talking to.</p><p>According to <a href="https://c4model.com" target="_blank" rel="noopener noreferrer">C4Model.com</a>, C4 is a way of creating maps of your software at various levels of detail just like what you would do on google maps. In google maps, you can zoom in &amp; out to different levels of detail.</p><p>C4 model, inspired by UML and 4+1 model , is a simplified and practical way of describing systems from different levels of abstractions.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="c4-core-diagrams">C4 Core Diagrams<a class="hash-link" href="#c4-core-diagrams" title="Direct link to heading">​</a></h2><p>Core diagrams provides a static view of a <strong>single software system</strong>. Core diagrams includes context, container, component and code. </p><p><img loading="lazy" alt="Core Diagram" src="/assets/images/corediagram-0ad342943a116a8c61a33c57e17c9f95.png" width="251" height="295" class="img_ev3q"></p><p>The next sections discusses each diagram in detail.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-system-context-diagram">1: System Context Diagram<a class="hash-link" href="#1-system-context-diagram" title="Direct link to heading">​</a></h3><p>Context diagram allows you to take a step back and see the bigger picture. It highlights the system we focusing on(hence the color blue), and the other systems and actors it integrates with. Each connection or relationship to actors or systems must have the purpose.</p><p>The diagram is what we use at the beginning of the story before zooming into details. The diagram is good for both technical and non-technical people, but I’ve seen more value when presented to non-technical people. </p><p>It is important <strong>not</strong> to add technical details or the components that makes up the system in this diagram. No need to mention Azure, AWS, API, Database details etc. Those details are mentioned as we zoom into the next level of details, the container diagram.    </p><p><img loading="lazy" alt="Context Diagram" src="/assets/images/context-45418ab6967186784fcdef0695f05073.png" width="2480" height="1748" class="img_ev3q"><sub><sup>Credit c4model.com</sup></sub></p><p>Because c4 represents a static view of a single software system, the "system in focus" is always blue. Other systems are gray in color because they are not the "single software system" we focusing on. If we need to focus on them, we need to create separate diagrams for them.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-container-diagram">2: Container Diagram<a class="hash-link" href="#2-container-diagram" title="Direct link to heading">​</a></h3><p>A container diagram is a high-level technology focused diagram that zooms a level down into the focus system (Blue Box) highlighted in System Context Diagram. </p><p>According to C4Model.com, a container represent an application or data store. It is a piece of software that we deploy in order for the whole system to work. Example of a container includes web app, mobile app, lamda function, azure functions, database, blob storage etc.</p><p>Container != Docker Container (!= not equals to)
Container does not represent a  dll/jar, its represent application which can be collections of dlls or Jars</p><p>We can add technical details to containers like React Native Mobile App, Azure Function, Mongo DB etc. The diagram  <strong>does not</strong> highlight any network related concepts like fail over, clustering, deployment scenarios etc.</p><p><img loading="lazy" alt="Container Diagram" src="/assets/images/containers-ba14dd9412ef0eaf0e30984529e42e7d.png" width="2480" height="1748" class="img_ev3q"><sub><sup>Credit c4model.com</sup></sub></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-component-diagram">3: Component Diagram<a class="hash-link" href="#3-component-diagram" title="Direct link to heading">​</a></h3><p>Component diagram is a level 3 diagram that drills down into a a container, highlighting the building blocks of a container. </p><p>A component is a collection of implementation classes behind an interface.</p><p>Important to note: Components are not separate deployable pieces of software, container is.</p><p>I'm not a big fan of component diagram and I have not seen the need for them. It’s not recommended to create them unless they add value to you and your team. If anyone is interested in this level of details, it’s better they jump into the repo and see it fresh. </p><p><img loading="lazy" alt="Component Diagram" src="/assets/images/components-3a4f7df0a4591385bfed3d868a91982b.png" width="2480" height="1748" class="img_ev3q"><sub><sup>Credit c4model.com</sup></sub></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-code">4: Code<a class="hash-link" href="#4-code" title="Direct link to heading">​</a></h3><p>It is the last level of C4 model where yo zoom into each component to show how it’s implemented as code.</p><p>It is not recommended to create this model since some IDE can automatically generate them from code. </p><p><img loading="lazy" alt="Classes Diagram" src="/assets/images/classes-a4ba73eb58c9de0b74b5cbc5932a9cf6.png" width="2480" height="1748" class="img_ev3q"><sub><sup>Credit c4model.com</sup></sub></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="supplementary-diagrams">Supplementary Diagrams<a class="hash-link" href="#supplementary-diagrams" title="Direct link to heading">​</a></h2><p>Samples of supplementary diagrams mentioned below are available on <a href="https://c4model.com" target="_blank" rel="noopener noreferrer">C4Model.com</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="system-landscape-diagram">System Landscape Diagram<a class="hash-link" href="#system-landscape-diagram" title="Direct link to heading">​</a></h3><p>System landscape Diagram is a context diagram without focus in a single system.</p><p>In some cases especially in projects, we need to present multiple applications in a single picture. Because C4 Core Diagrams focuses on a a static view of a <strong>single system</strong>, it might not be relevant.</p><p>In my experience, this is one of the simple pictures to design provided you have core diagrams of all application within your organization.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dynamic-diagram">Dynamic Diagram<a class="hash-link" href="#dynamic-diagram" title="Direct link to heading">​</a></h3><p>Just like on UML communication/collaboration diagram, it’s a diagram that shows sequence or numbered interactions between actors and applications. </p><p>I find it useful to describe simple scenarios. Where lots of containers are involved, traditional sequence diagram is simpler to understand.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-diagram">Deployment Diagram<a class="hash-link" href="#deployment-diagram" title="Direct link to heading">​</a></h3><p>Shows how systems and containers are mapped to infrastructure.
It’s based on UML Deployment diagram.</p><p>This is where we show networks, load balancers, firewalls etc.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="guidelines-when-creating-c4-diagrams">Guidelines when creating c4 diagrams<a class="hash-link" href="#guidelines-when-creating-c4-diagrams" title="Direct link to heading">​</a></h2><p>According to <a href="https://c4model.com" target="_blank" rel="noopener noreferrer">C4Model.com</a>,</p><ul><li>Each diagram should have title describing diagram type and scope (e.g. Context diagram of Travel Sko).</li><li>Each diagram should have a legend.</li><li>Acronyms and abbreviations should be understandable, otherwise avoid them.</li><li>Every container should have technology explicitly specified. (e.g Azure function, React Web app)</li><li>Every relationship should be label with direction and intent</li><li>Diagrams should not be stale. I prefer to only create Context and Container diagram because their rate of change is very low and easy to keep them fresh.  </li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Some of the reasons why I like C4 diagramming/modelling</p><ul><li>It is a simplified UML.</li><li>It’s practical, easy to understand.</li><li>Promote distributed design within the organizations. </li><li>Most important, it clarifies the System Boundary, which can be a struggle as highlighted on <a href="https://nolomokgosi.com/blog/understandingboundaries" target="_blank" rel="noopener noreferrer">understanding boundaries</a> post.</li></ul><p>The first 2 diagrams (Context and Container) are key and can bring clarity and alignment needed through out the organization. If each system in the organization has this 2 diagrams (fresh not stale), there would not be a need to have meetings &amp; meetings where architects or engineers explains  details (structure, integration, relationships, deployed containers) of the system they look after. Most importantly, some conversations would not need architect or engineer to be present.</p><p>It is important to note that C4 does not cover all architecture artifacts. Missing link:</p><ul><li>Sequence Diagram: Dynamic diagram can replace a sequence diagram but lots of lines/activities will complicate it. I still feel there’s a room for sequence and I’ll cover it in my next post. </li><li>Business processes, workflows, state machines, domain models, </li><li>Data models</li></ul><p>As we close, let’s marry our scenarios to c4</p><ol><li>In a foreign country : I’m from South Africa = Context Diagram</li><li>In my home country: I’m from Rusternburg = Container Diagram</li><li>At local shopping mall: I’m from Mabeskraal = Component Diagram</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><p><a href="https://c4model.com" target="_blank" rel="noopener noreferrer">https://c4model.com</a></p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="diagramming" term="diagramming"/>
        <category label="modelling" term="modelling"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Understanding Boundaries]]></title>
        <id>understandingboundaries</id>
        <link href="https://nolo28mokgosi@github.io/blog/understandingboundaries"/>
        <updated>2022-01-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA["One of the undecided problems of software development is deciding what the boundaries of a piece of software is" - Martin Fowler. This is statement is so true, creeps into most of my design conversation.]]></summary>
        <content type="html"><![CDATA[<p>"One of the undecided problems of software development is deciding what the boundaries of a piece of software is" - <a href="https://martinfowler.com/bliki/ApplicationBoundary.html" target="_blank" rel="noopener noreferrer">Martin Fowler</a>. This is statement is so true, creeps into most of my design conversation. </p><p><img loading="lazy" alt="Cable Mess" src="/assets/images/boundaries-b5117980d928cc6f69a882acbed8497b.jpg" width="552" height="300" class="img_ev3q"></p><p><em>Photo by goodtherapy.org</em></p><p>If we step out of tech world for a moment, we'll realise that boundaries are applied in our everyday life. Some of those boundaries has unwritten rules or principles.</p><p>Let's zoom into John's life as an example. John is a 14 year old boy who lives with his parents and younger sister in a 4 bedroom house. He loves football and has posters all over the bedroom he shares with his younger sister. John's mother is strict and likes order in her house. John's father is chilled. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="johns-house">John's house<a class="hash-link" href="#johns-house" title="Direct link to heading">​</a></h2><ul><li><p><strong>Bedroom 1:</strong> Parents bedroom, always clean and organised. It is clear that mother's standards and principles are followed.</p></li><li><p><strong>Bedroom 2:</strong> A room John shares with his sister. Through constant screaming and ruling with terror, John's mother tried to instill her standards and principles and failed dismallly. John implemented his own standard &amp; principles</p></li><li><p><strong>Kitchen &amp; Lounge:</strong> Just like John's parents bedroom, always organised. It is clear that mother's standards and principles are followed. Kitchen is for cooking. Lounge is where family watches 7de laan everyday at 7. </p></li></ul><p>Looking at this example, and zooming into our everyday life, you will realise our space has boundaries and most of the rules or principles are not written down. For example, only sleep in the bedroom, cook in the kitchen.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="in-software-world">In Software World<a class="hash-link" href="#in-software-world" title="Direct link to heading">​</a></h2><p>In large organisations where teams write software each and every day, it is important to define and document boundaries. Since teams have different stakeholders, you might find teams writing duplicate capabilities in the same organisation. </p><p>Take this example: </p><ul><li>Stakeholder: Can you create a screen where i can manage client data?</li><li>Engineer: Say no more.</li><li>Stakeholder: I would like to send an email to client after completing this task.</li><li>Engineer: I got it, its a simple functionality to build.</li><li>Stakeholder: Can you make sure that I can see all the holidays on the system?</li><li>Engineer: We know what to to build. We'll be done next week. </li></ul><p>In this case, tech team is writing software to fulfil stakeholder needs without checking if the capablility exists in the organisation. Since  boundaries are not applied, the team will end up with an application that manages client data, execute client communications &amp; managing holiday data. </p><p>It does not mean it's bad to have such application. It's only bad if the boundary is not defined, it's done in isolation or leads to refactoring and data clean up projects in future. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Defining boundaries in large organisations can be a difficult task but it is a good investment.</p><p> The absence of software or application boundaries leads to</p><ul><li>Data being duplicated &amp; managed in different applications.</li><li>Increase in cost at organisational level</li><li>Bad client experience e.g. where client updates address or contact details and the update does not filter down to other applications</li></ul><p>The results of boundary definition exercise should include this major points:</p><ul><li>Application is responsible for ABC capability/function</li><li>Application is NOT responsible for XYZ capability/function</li></ul><p><a href="https://teamtopologies.com/book" target="_blank" rel="noopener noreferrer">Team Topologies</a> and <a href="https://www.amazon.co.uk/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215" target="_blank" rel="noopener noreferrer">Domain Driven Design</a> books shines the light in this subject.</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
        <category label="Domain Driven Design" term="Domain Driven Design"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Entanglement]]></title>
        <id>entanglement</id>
        <link href="https://nolo28mokgosi@github.io/blog/entanglement"/>
        <updated>2021-12-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Imagine you are an engineer working in a application/system that has been operating for years. Your stakeholders asks  to implement a breaking change on the API.Assuming you joined the organisation less than a year ago, you ask around if anyone knows  about your API integration points and no one knows. You start feeling like an application you working on looks and feels like the picture below, "ENTANGLED".]]></summary>
        <content type="html"><![CDATA[<p>Imagine you are an engineer working in a application/system that has been operating for years. Your stakeholders asks  to implement a breaking change on the API.Assuming you joined the organisation less than a year ago, you ask around if anyone knows  about your API integration points and no one knows. You start feeling like an application you working on looks and feels like the picture below, "ENTANGLED".</p><p><img loading="lazy" alt="Cable Mess" src="/assets/images/messy-cables-388f3d0b35c3e9a71758193df87b3f17.png" width="564" height="285" class="img_ev3q"><br>
<em>Photo by mikemontague.com</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-you-know-your-application-is-entangled">How do you know your application is entangled?<a class="hash-link" href="#how-do-you-know-your-application-is-entangled" title="Direct link to heading">​</a></h2><p>According to cambridge dictionary, entanglement is "a situation or relationship that you are involved in and that is difficult to escape from". The word was made popular in 2020 by famous couple in the US. In this document, we will discuss entaglement in IT applications. </p><p>The minute you feel like you are diffusing a bomb when you are asked to implement a breaking changes on the API or switch off integration point, know that your application is entagled 😃.</p><p><img loading="lazy" alt="Diffuce bomb" src="/assets/images/diffusebomb-3d31f316bd3bede55933a2fcb04c39c6.jpg" width="708" height="468" class="img_ev3q"><br>
<em>Photo by mikemontague.com</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-avoid-entanglement">How to avoid entanglement<a class="hash-link" href="#how-to-avoid-entanglement" title="Direct link to heading">​</a></h2><ol><li><p><strong>Document current state of your application</strong><br>
<!-- -->There should be a simple highlevel documentation or design that outlines application integration points. It will also be beneficial to outline users/user groups interacting with the application.</p></li><li><p><strong>Keep you current state of your application alive</strong><br>
<!-- -->Documenting current state is one thing, keeping documentation alive is always a challenge.
I've worked on <a href="https://c4model.com" target="_blank" rel="noopener noreferrer">C4</a> and love it. It's simple, maintainable especially if you focus only at "System Context" for organisation wide designs.</p></li><li><p><strong>Agree to certain format</strong><br>
<!-- -->Fact is different designers/architects/engineers document differently. There is a chance that most application have documentation somewhere in archives in word documents, wiki of some sort. We might be outdated, or might be difficult to find, or difficult to understand. Choose from formats/frameworks like <a href="https://c4model.com" target="_blank" rel="noopener noreferrer">C4</a> and <a href="https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf" target="_blank" rel="noopener noreferrer">4+1</a>) </p></li><li><p><strong>Be clear on design assets of the organisation</strong><br>
<!-- -->Code in organisation is treated as a first class citizen. Gone are the days where we used to panic when engineer's machine crashed and we loose days worth of code. Nowadays our code is in the repo, and we have CI/CD in place.
Just like code where we adhere to certain principles &amp; standandards, it is important to agree on organisation level design assest, and give them first class citizen membership.</p></li><li><p><strong>Current state documenation must be accessible</strong>
Current state provide answers to many questions asked in multiple meetings. Instead or reinventing the wheel or getting right people to answer questions like what are the integration points of the appliction? How do they integrate? Which users interact with the application? It's so cool to answer by a link to an up-to-date documentation/design.</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>One might ask, why do we need to create more documents/design assets if we can read code and have a clear pictures. Statement is valid but it is important to remember that: </p><ul><li>Sometimes we need answers in our finger tips to make decisions</li><li>Applications we are building today will live beyond our time (we might leave the orgnisation, or join other teams)</li><li>Applications you working on is part of the broader eco-system of applications</li><li>It helps to provide basic application information to decision makers, non-techincal community within our organisation</li></ul><p>If you would like to take it to the next level, checkout <a href="https://github.com/ddd-crew/bounded-context-canvas" target="_blank" rel="noopener noreferrer">Bounded Context Canvas</a>.</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="design" term="design"/>
    </entry>
</feed>