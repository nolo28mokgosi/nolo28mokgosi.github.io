<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nolo28mokgosi@github.io/blog</id>
    <title>back 2 basix Blog</title>
    <updated>2022-03-27T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nolo28mokgosi@github.io/blog"/>
    <subtitle>back 2 basix Blog</subtitle>
    <icon>https://nolo28mokgosi@github.io/img/fav.ico</icon>
    <entry>
        <title type="html"><![CDATA[Introduction to C4 Diagramming]]></title>
        <id>introductiontoc4</id>
        <link href="https://nolo28mokgosi@github.io/blog/introductiontoc4"/>
        <updated>2022-03-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Scenarios]]></summary>
        <content type="html"><![CDATA[<h2>Scenarios</h2><p>Scenario 1: Imagine you are at the airport in a <strong>foreign country</strong> and about to fly to your home country.A stranger sits next to you, greets you and ask you where are you from. What will be your response?</p><p>Scenario 2: Imagine you are at the domestic terminal in your <strong>home country</strong>, and you are about to fly to another city. A stranger greets you and ask you where are you from. What will be your response?</p><p>Scenario 3: You are in a coffee shop at local shopping centre and stranger asks you where are you from, what will be your response?</p><p>Do you have different answers in the 3 scenarios? If so why?</p><p><img src="/img/blog/airport.png" alt="Airport wait"/></p><sub><sup>Credit rgbstock</sup></sub><p><strong>If I had to respond</strong></p><p>I’m from a village called Mabeskraal, classified under Rusternburg town/district in South Africa. My response in 3 scenarios:</p><ol><li>In a foreign country : I’m from South Africa</li><li>In my home country: I’m from Rusternburg</li><li>At local shopping mall: I’m from Mabeskraal</li></ol><p>Answers are different because &quot;it depends&quot; on where I am are at the particular point, and who&#x27;s asking.
In a case where the stranger is familiar with South Africa, dialog might go like this:</p><ul><li>Stranger: Where in South Africa?</li><li>Me: In Rusternburg (Zooming 1 level down)</li><li>Stranger: Oh I’ve been to Rusternburg, where exactly? </li><li>Me: In a village called Mabeskraal (Zooming another level down)</li></ul><h2>C4 Modelling</h2><p>How does C4 fit in all of this? It is all about the ability to zoom in and out &quot;depending&quot; on where you are and the people you are talking to.</p><p>According to <a href="https://c4model.com">C4Model.com</a>, C4 is a way of creating maps of your software at various levels of detail just like what you would do on google maps. In google maps, you can zoom in &amp; out to different levels of detail.</p><p>C4 model, inspired by UML and 4+1 model , is a simplified and practical way of describing systems from different levels of abstractions.</p><h2>C4 Core Diagrams</h2><p>Core diagrams provides a static view of a <strong>single software system</strong>. Core diagrams includes context, container, component and code. </p><p><img src="/img/blog/corediagram.png" alt="Core Diagram"/></p><p>The next sections discusses each diagram in detail.</p><h3>1: System Context Diagram</h3><p>Context diagram allows you to take a step back and see the bigger picture. It highlights the system we focusing on(hence the color blue), and the other systems and actors it integrates with. Each connection or relationship to actors or systems must have the purpose.</p><p>The digram is what we use at the beginning of the story before zooming into details. The digram is good for both technical and non-technical people, but I’ve seen more value when presented to non-technical people. </p><p>It is important <strong>not</strong> to add technical details or the components that makes up the system in this diagram. No need to mention Azure, AWS, API, Database details etc. Those details are mentioned as we zoom into the next level of details, the container diagram.    </p><p><img src="/img/blog/context.png" alt="Context Diagram"/><sub><sup>Credit c4model.com</sup></sub></p><p>Because c4 represents a static view of a single software system, the &quot;system in focus&quot; is always blue. Other systems are gray in color because they are not the &quot;single software system&quot; we focusing on. If we need to focus on them, we need to create separate diagrams for them.</p><h3>2: Container Diagram</h3><p>A container diagram is a high-level technology focused diagram that zooms a level down into the focus system (Blue Box) highlighted in System Context Diagram. </p><p>According to C4Model.com, a container represent an application or data store. It is a piece of software that we deploy in order for the whole system to work. Example of a container includes web app, mobile app, lamda function, azure functions, database, blob storage etc.</p><p>Container != Docker Container (!= not equals to)
Container does not represent a  dll/jar, its represent application which can be collections of dlls or Jars</p><p>We can add technical details to containers like React Native Mobile App, Azure Function, Mongo DB etc. The diagram  <strong>does not</strong> highlight any network related concepts like fail over, clustering, deployment scenarios etc.</p><p><img src="/img/blog/containers.png" alt="Container Diagram"/><sub><sup>Credit c4model.com</sup></sub></p><h3>3: Component Diagram</h3><p>Component diagram is a level 3 diagram that drills down into a a container, highlighting the building blocks of a container. </p><p>A component is a collection of implementation classes behind an interface.</p><p>Important to note: Components are not separate deployable pieces of software, container is.</p><p>I&#x27;m not a big fan of component diagram and I have not seen the need for them. It’s not recommended to create them unless they add value to you and your team. If anyone is interested in this level of details, it’s better they jump into the repo and see it fresh. </p><p><img src="/img/blog/components.png" alt="Component Diagram"/><sub><sup>Credit c4model.com</sup></sub></p><h3>4: Code</h3><p>It is the last level of C4 model where yo zoom into each component to show how it’s implemented as code.</p><p>It is not recommended to create this model since some IDE can automatically generate them from code. </p><p><img src="/img/blog/classes.png" alt="Classes Diagram"/><sub><sup>Credit c4model.com</sup></sub></p><h2>Supplementary Diagrams</h2><p>Samples of supplementary diagrams mentioned below are available on <a href="https://c4model.com">C4Model.com</a></p><h3>System Landscape Diagram</h3><p>System landscape Diagram is a context diagram without focus in a single system.</p><p>In some cases especially in projects, we need to present multiple applications in a single picture. Because C4 Core Diagrams focuses on a a static view of a <strong>single system</strong>, it might not be relevant.</p><p>In my experience, this is one of the simple pictures to design provided you have core diagrams of all application within your organisation.</p><h3>Dynamic Diagram</h3><p>Just like on UML communication/collaboration diagram, it’s a diagram that shows sequence or numbered interactions between actors and applications. </p><p>I find it useful to describe simple scenarios. Where lots of containers are involved, traditional sequence diagram is simpler to understand.</p><h3>Deployment Diagram</h3><p>Shows how systems and containers are mapped to infrastructure.
It’s based on UML Deployment diagram.</p><p>This is where we show networks, load balancers, firewalls etc.</p><h2>Guidelines when creating c4 diagrams</h2><p>According to <a href="https://c4model.com">C4Model.com</a>,</p><ul><li>Each diagram should have title describing digram type and scope (e.g. Context diagram of Travel Sko).</li><li>Each diagram should have a legend.</li><li>Acronyms and abbreviations should be understandable, otherwise avoid them.</li><li>Every container should have technology explicitly specified. (e.g Azure function, React Web app)</li><li>Every relationship should be label with direction and intent</li><li>Diagrams should not be stale. I prefer to only create Context and Container diagram because their rate of change is very low and easy to keep them fresh.  </li></ul><h2>Conclusion</h2><p>Some of the reasons why I like C4 diagramming/modelling</p><ul><li>It is a simplified UML.</li><li>It’s practical, easy to understand.</li><li>Promote distributed design within the organisations. </li><li>Most important, it clarifies the System Boundary, which can be a struggle as highlighted on <a href="https://nolomokgosi.com/blog/understandingboundaries">understanding boundaries</a> post.</li></ul><p>The first 2 diagrams (Context and Container) are key and can bring clarity and alignment needed through out the organisation. If each system in the organisation has this 2 diagrams (fresh not stale), there would not be a need to have meetings &amp; meetings where architects or engineers explains  details (stucture, integration, relationships, deployed containers) of the system they look after. Most importantly, some conversations would not need architect or engineer to be present.</p><p>It is important to note that C4 does not cover all architecture artifacts. Missing link:</p><ul><li>Sequence. Although is in a dynamic diagram, lots and lots of line will complicate it. I still feel there’s a room for sequence and I’ll cover it in my next post. </li><li>Business processes, workflows, state machines, domain models, </li><li>Data models</li></ul><p>As we close, let’s marry our scenarios to c4</p><ol><li>In a foreign country : I’m from South Africa = Context Diagram</li><li>In my home country: I’m from Rusternburg = Container Diagram</li><li>At local shopping mall: I’m from Mabeskraal = Component Diagram</li></ol><h2>Reference</h2><p><a href="https://c4model.com">https://c4model.com</a></p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Understanding Boundaries]]></title>
        <id>understandingboundaries</id>
        <link href="https://nolo28mokgosi@github.io/blog/understandingboundaries"/>
        <updated>2022-01-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA["One of the undecided problems of software development is deciding what the boundaries of a piece of software is" - Martin Fowler. This is statement is so true, creeps into most of my design conversation.]]></summary>
        <content type="html"><![CDATA[<p>&quot;One of the undecided problems of software development is deciding what the boundaries of a piece of software is&quot; - <a href="https://martinfowler.com/bliki/ApplicationBoundary.html">Martin Fowler</a>. This is statement is so true, creeps into most of my design conversation. </p><p><img src="/img/blog/boundaries.jpg" alt="Cable Mess"/></p><p><em>Photo by goodtherapy.org</em></p><p>If we step out of tech world for a moment, we&#x27;ll realise that boundaries are applied in our everyday life. Some of those boundaries has unwritten rules or principles.</p><p>Let&#x27;s zoom into John&#x27;s life as an example. John is a 14 year old boy who lives with his parents and younger sister in a 4 bedroom house. He loves football and has posters all over the bedroom he shares with his younger sister. John&#x27;s mother is strict and likes order in her house. John&#x27;s father is chilled. </p><h2>John&#x27;s house</h2><ul><li><p><strong>Bedroom 1:</strong> Parents bedroom, always clean and organised. It is clear that mother&#x27;s standards and principles are followed.</p></li><li><p><strong>Bedroom 2:</strong> A room John shares with his sister. Through constant screaming and ruling with terror, John&#x27;s mother tried to instill her standards and principles and failed dismallly. John implemented his own standard &amp; principles</p></li><li><p><strong>Kitchen &amp; Lounge:</strong> Just like John&#x27;s parents bedroom, always organised. It is clear that mother&#x27;s standards and principles are followed. Kitchen is for cooking. Lounge is where family watches 7de laan everyday at 7. </p></li></ul><p>Looking at this example, and zooming into our everyday life, you will realise our space has boundaries and most of the rules or principles are not written down. For example, only sleep in the bedroom, cook in the kitchen.</p><h2>In Software World</h2><p>In large organisations where teams write software each and every day, it is important to define and document boundaries. Since teams have different stakeholders, you might find teams writing duplicate capabilities in the same organisation. </p><p>Take this example: </p><ul><li>Stakeholder: Can you create a screen where i can manage client data?</li><li>Engineer: Say no more.</li><li>Stakeholder: I would like to send an email to client after completing this task.</li><li>Engineer: I got it, its a simple functionality to build.</li><li>Stakeholder: Can you make sure that I can see all the holidays on the system?</li><li>Engineer: We know what to to build. We&#x27;ll be done next week. </li></ul><p>In this case, tech team is writing software to fulfil stakeholder needs without checking if the capablility exists in the organisation. Since  boundaries are not applied, the team will end up with an application that manages client data, execute client communications &amp; managing holiday data. </p><p>It does not mean it&#x27;s bad to have such application. It&#x27;s only bad if the boundary is not defined, it&#x27;s done in isolation or leads to refactoring and data clean up projects in future. </p><h2>Conclusion</h2><p>Defining boundaries in large organisations can be a difficult task but it is a good investment.</p><p> The absence of software or application boundaries leads to</p><ul><li>Data being duplicated &amp; managed in different applications.</li><li>Increase in cost at organisational level</li><li>Bad client experience e.g. where client updates address or contact details and the update does not filter down to other applications</li></ul><p>The results of boundary definition exercise should include this major points:</p><ul><li>Application is responsible for ABC capability/function</li><li>Application is NOT responsible for XYZ capability/function</li></ul><p><a href="https://teamtopologies.com/book">Team Topologies</a> and <a href="https://www.amazon.co.uk/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">Domain Driven Design</a> books shines the light in this subject.</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Entanglement]]></title>
        <id>entanglement</id>
        <link href="https://nolo28mokgosi@github.io/blog/entanglement"/>
        <updated>2021-12-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Imagine you are an engineer working in a application/system that has been operating for years. Your stakeholders asks  to implement a breaking change on the API.Assuming you joined the organisation less than a year ago, you ask around if anyone knows  about your API integration points and no one knows. You start feeling like an application you working on looks and feels like the picture below, "ENTANGLED".]]></summary>
        <content type="html"><![CDATA[<p>Imagine you are an engineer working in a application/system that has been operating for years. Your stakeholders asks  to implement a breaking change on the API.Assuming you joined the organisation less than a year ago, you ask around if anyone knows  about your API integration points and no one knows. You start feeling like an application you working on looks and feels like the picture below, &quot;ENTANGLED&quot;.</p><p><img src="./messy-cables.png" alt="Cable Mess"/><br/>
<em>Photo by mikemontague.com</em></p><h2>How do you know your application is entangled?</h2><p>According to cambridge dictionary, entanglement is &quot;a situation or relationship that you are involved in and that is difficult to escape from&quot;. The word was made popular in 2020 by famous couple in the US. In this document, we will discuss entaglement in IT applications. </p><p>The minute you feel like you are diffusing a bomb when you are asked to implement a breaking changes on the API or switch off integration point, know that your application is entagled :smiley:.</p><p><img src="./diffusebomb.jpg" alt="Diffuce bomb"/><br/>
<em>Photo by mikemontague.com</em></p><h2>How to avoid entanglement</h2><ol><li><p><strong>Document current state of your application</strong><br/>
<!-- -->There should be a simple highlevel documentation or design that outlines application integration points. It will also be beneficial to outline users/user groups interacting with the application.</p></li><li><p><strong>Keep you current state of your application alive</strong><br/>
<!-- -->Documenting current state is one thing, keeping documentation alive is always a challenge.
I&#x27;ve worked on <a href="https://c4model.com">C4</a> and love it. It&#x27;s simple, maintainable especially if you focus only at &quot;System Context&quot; for organisation wide designs.</p></li><li><p><strong>Agree to certain format</strong><br/>
<!-- -->Fact is different designers/architects/engineers document differently. There is a chance that most application have documentation somewhere in archives in word documents, wiki of some sort. We might be outdated, or might be difficult to find, or difficult to understand. Choose from formats/frameworks like <a href="https://c4model.com">C4</a> and <a href="https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf">4+1</a>) </p></li><li><p><strong>Be clear on design assets of the organisation</strong><br/>
<!-- -->Code in organisation is treated as a first class citizen. Gone are the days where we used to panic when engineer&#x27;s machine crashed and we loose days worth of code. Nowadays our code is in the repo, and we have CI/CD in place.
Just like code where we adhere to certain principles &amp; standandards, it is important to agree on organisation level design assest, and give them first class citizen membership.</p></li><li><p><strong>Current state documenation must be accessible</strong>
Current state provide answers to many questions asked in multiple meetings. Instead or reinventing the wheel or getting right people to answer questions like what are the integration points of the appliction? How do they integrate? Which users interact with the application? It&#x27;s so cool to answer by a link to an up-to-date documentation/design.</p></li></ol><h2>Conclusion</h2><p>One might ask, why do we need to create more documents/design assets if we can read code and have a clear pictures. Statement is valid but it is important to remember that: </p><ul><li>Sometimes we need answers in our finger tips to make decisions</li><li>Applications we are building today will live beyond our time (we might leave the orgnisation, or join other teams)</li><li>Applications you working on is part of the broader eco-system of applications</li><li>It helps to provide basic application information to decision makers, non-techincal community within our organisation</li></ul><p>If you would like to take it to the next level, checkout <a href="https://github.com/ddd-crew/bounded-context-canvas">Bounded Context Canvas</a>.</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
    </entry>
</feed>