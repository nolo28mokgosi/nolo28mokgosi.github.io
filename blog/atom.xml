<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nolo28mokgosi@github.io/blog</id>
    <title>demistify &amp; simplify tech concepts Blog</title>
    <updated>2022-01-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nolo28mokgosi@github.io/blog"/>
    <subtitle>demistify &amp; simplify tech concepts Blog</subtitle>
    <icon>https://nolo28mokgosi@github.io/img/fav.ico</icon>
    <entry>
        <title type="html"><![CDATA[Understanding Boundaries]]></title>
        <id>understandingboundaries</id>
        <link href="https://nolo28mokgosi@github.io/blog/understandingboundaries"/>
        <updated>2022-01-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The term Domain Driven Design was coined by Eric Evans and it means [...]. It took me time to understand it and once I got it, I realised it is key & important to designing of software.]]></summary>
        <content type="html"><![CDATA[<p>The term Domain Driven Design was coined by Eric Evans and it means <!-- -->[...]<!-- -->. It took me time to understand it and once I got it, I realised it is key &amp; important to designing of software.</p><h2>Growing up</h2><p>Boundaries are applied in our everyday life. You spot it by standards &amp; principles that we apply, written &amp; unwritten. For example, in our houses, there are things you do in 1 room, and not in another. Growing up I could have mu lunch in my bedroom when my mother is not around. Whenever she was around, world war 3.</p><p>I grew up in a 4  bedroom house, 2 bedrooms, kitchen &amp; lounge. My recollection:</p><ul><li><strong>Bedroom 1:</strong> My parents bedroom, always clean and organised. It was clear it was following my mother&#x27;s standards and principles.</li><li><strong>Bedroom 2:</strong>A room i shared with my sister. Through constant screaming and ruling with terror, my mother tried to instill her standards and principles and failed dismallly. I implemented my standard &amp; principles. I had soccer posters everywhere and Brazil 1998 squad was dominating. Zidane did hurt my feelings that year, I&#x27;ll never forget.</li><li><strong>Kitchen &amp; Lounge:</strong> Just like my parents bedroom, always organised. It was clear that my mother&#x27;s standards and principles.</li></ul><h2>In Tech</h2><p>It is important to create and understand boundaries on the software we build. In m early development days, I used to focus on solving the problem for my stakeholders. I could solve everything in the software I was building.
Stakeholder: Can you create a screen where i can manage client data
Me: Say no more
Stakeholder: I would like to send an email to client after completing this task
Me: I got it
Stake holder: Can you make sure that I can see all the holidays on the system
Me: Coming soon</p><p>Little did I know that it is eazy &amp; possible to end up with a monolith that manage client data, holiday data, communications etc. It doesn&#x27;t mean it&#x27;s impossible, but in large organisation maintaining one pieace of software can be challenging and can introduce unessary cost &amp; delay in introducing new functionality <!-- -->[..link to show disadvantages of monolith.]</p><p>Hence it is important to understand the capabilities &amp; functions of the application you want to build.It is important to have a boundary of your application, with defined standards &amp; principles.
Those standards &amp; principles becomes a guidance to new joiners &amp; anyone who would like to understand capabilities &amp; functions of your application.</p><h2>Conclusion</h2><p>Defining boundaries in large organisations can be a difficult task but a good investement for the future of software we build.
<!-- -->[..Find article on the benefits of DDD..]</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Entanglement]]></title>
        <id>entanglement</id>
        <link href="https://nolo28mokgosi@github.io/blog/entanglement"/>
        <updated>2021-12-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Imagine you are an engineer working in a application/system that has been operating for years. Your stakeholders asks  to implement a breaking change on the API.Assuming you joined the organisation less than a year ago, you ask around if anyone knows  about your API integration points and no one knows. You start feeling like an application you working on looks and feels like the picture below, "ENTANGLED".]]></summary>
        <content type="html"><![CDATA[<p>Imagine you are an engineer working in a application/system that has been operating for years. Your stakeholders asks  to implement a breaking change on the API.Assuming you joined the organisation less than a year ago, you ask around if anyone knows  about your API integration points and no one knows. You start feeling like an application you working on looks and feels like the picture below, &quot;ENTANGLED&quot;.</p><p><img src="./messy-cables.png" alt="Cable Mess"/><br/>
<em>Photo by mikemontague.com</em></p><h2>How do you know your application is entangled?</h2><p>According to cambridge dictionary, entanglement is &quot;a situation or relationship that you are involved in and that is difficult to escape from&quot;. The word was made popular in 2020 by famous couple in the US. In this document, we will discuss entaglement in IT applications. </p><p>The minute you feel like you are diffusing a bomb when you are asked to implement a breaking changes on the API or switch off integration point, know that your application is entagled :smiley:.</p><p><img src="./diffusebomb.jpg" alt="Diffuce bomb"/><br/>
<em>Photo by mikemontague.com</em></p><h2>How to avoid entanglement</h2><ol><li><p><strong>Document current state of your application</strong><br/>
<!-- -->There should be a simple highlevel documentation or design that outlines application integration points. It will also be beneficial to outline users/user groups interacting with the application.</p></li><li><p><strong>Keep you current state of your application alive</strong><br/>
<!-- -->Documenting current state is one thing, keeping documentation alive is always a challenge.
I&#x27;ve worked on <a href="https://c4model.com">C4</a> and love it. It&#x27;s simple, maintainable especially if you focus only at &quot;System Context&quot; for organisation wide designs.</p></li><li><p><strong>Agree to certain format</strong><br/>
<!-- -->Fact is different designers/architects/engineers document differently. There is a chance that most application have documentation somewhere in archives in word documents, wiki of some sort. We might be outdated, or might be difficult to find, or difficult to understand. Choose from formats/frameworks like <a href="https://c4model.com">C4</a> and <a href="https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf">4+1</a>) </p></li><li><p><strong>Be clear on design assets of the organisation</strong><br/>
<!-- -->Code in organisation is treated as a first class citizen. Gone are the days where we used to panic when engineer&#x27;s machine crashed and we loose days worth of code. Nowadays our code is in the repo, and we have CI/CD in place.
Just like code where we adhere to certain principles &amp; standandards, it is important to agree on organisation level design assest, and give them first class citizen membership.</p></li><li><p><strong>Current state documenation must be accessible</strong>
Current state provide answers to many questions asked in multiple meetings. Instead or reinventing the wheel or getting right people to answer questions like what are the integration points of the appliction? How do they integrate? Which users interact with the application? It&#x27;s so cool to answer by a link to an up-to-date documentation/design.</p></li></ol><h2>Conclusion</h2><p>One might ask, why do we need to create more documents/design assets if we can read code and have a clear pictures. Statement is valid but it is important to remember that: </p><ul><li>Sometimes we need answers in our finger tips to make decisions</li><li>Applications we are building today will live beyond our time (we might leave the orgnisation, or join other teams)</li><li>Applications you working on is part of the broader eco-system of applications</li><li>It helps to provide basic application information to decision makers, non-techincal community within our organisation</li></ul><p>If you would like to take it to the next level, checkout <a href="https://github.com/ddd-crew/bounded-context-canvas">Bounded Context Canvas</a>.</p>]]></content>
        <author>
            <name>Nolo Mokgosi</name>
            <uri>https://github.com/nolo28mokgosi</uri>
        </author>
    </entry>
</feed>